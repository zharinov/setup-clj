name: 'Clojure essential tooling'
description: 'All the tools for Clojure with out-of-the-box caching.'
branding:
  icon: 'activity'
  color: 'green'
inputs:
  #
  # Clojure tooling
  #
  # See: https://github.com/DeLaGuardo/setup-clojure/blob/main/action.yml
  #
  clojure-cli:
    description: 'Clojure CLI version to install.'
    required: false
    default: '1.11.1.1182' # github-tags: clojure/brew-install - Clojure CLI
  leiningen:
    description: 'Leiningen build tool version to install.'
    required: false
  boot:
    description: 'Boot build tool version to install.'
    required: false
  babashka:
    description: 'Babashka scripting tool version to install.'
    required: false
  clj-kondo:
    description: 'Clj-kondo linting tool version to install.'
    required: false
  cljstyle:
    description: 'Cljstyle formatting tool version to install.'
    required: false
  zprint:
    description: 'Zprint formatting tool version to install.'
    required: false

  #
  # Java tooling
  #
  # See: https://github.com/actions/setup-java/blob/main/action.yml
  #
  java:
    description: 'Java distribution: graalvm, temurin, zulu, adopt, adopt, liberica, microsoft, corretto.'
    required: false
    default: temurin
  java-version:
    description: 'The Java version to set up. Takes a whole or semver Java version.'
    required: false
    default: "17"

  #
  # GraalVM tooling
  #
  # See: https://github.com/graalvm/setup-graalvm/blob/main/action.yml
  #
  graalvm-version:
    default: '22.3.1' # github-releases: graalvm/graalvm-ce-builds - GraalVM
    description: 'GraalVM version (release, latest, dev).'
    required: false
  graalvm-components:
    description: 'Comma-separated list of GraalVM components to be installed.'
    default: native-image
    required: false
  graalvm-gds-token:
    description: 'Download token for the GraalVM Download Service. If provided, the action will set up GraalVM Enterprise Edition.'
    required: false
  graalvm-set-java-home:
    description: 'Set $JAVA_HOME to the GraalVM installation. Default: true.'
    required: false
    default: 'true'
  graalvm-native-image-musl:
    description: 'Set up musl for static image building with GraalVM Native Image.'
    default: 'false'
    required: false

  #
  # Misc parameters
  #
  github-token:
    description: >+
      To avoid rate limit errors, you need to provide GitHub token.
      More info: https://docs.github.com/en/actions/security-guides/automatic-token-authentication
    default: ${{ github.token }}
    required: false

runs:
  using: composite
  steps:
    - name: Computed values
      id: vars
      shell: ${{ (runner.os == 'Windows' && 'pwsh') || 'bash' }}
      run: |
        echo "::set-output name=java-major-version::${{
          (startsWith(inputs.java-version, '8.')  && '8')  ||
          (startsWith(inputs.java-version, '11.') && '11') ||
          (startsWith(inputs.java-version, '16.') && '16') ||
          (startsWith(inputs.java-version, '17.') && '17') ||
          inputs.java-version
        }}"
        echo "::set-output name=arch::${{
          (runner.arch == 'ARM' && 'arm')     || 
          (runner.arch == 'ARM64' && 'arm64') || 
          (runner.arch == 'X86' && 'ia32')    || 
          (runner.arch == 'X64' && 'x64')     || 
          runner.arch
        }}"
        echo "::set-output name=os::${{
          (runner.os == 'macOS' && 'darwin')  || 
          (runner.os == 'Windows' && 'win32') || 
          (runner.os == 'Linux' && 'linux')   || 
          runner.os 
        }}"
        echo "::set-output name=java::${{
          (inputs.java == 'graalvm' && 'graalvm-ce')      || 
          (inputs.java == 'temurin' && 'Temurin-Hotspot') || 
          (inputs.java == 'zulu' && 'Zulu')               || 
          (inputs.java == 'adopt' && 'Adopt')             || 
          (inputs.java == 'adopt-hotspot' && 'Adopt')     || 
          (inputs.java == 'liberica' && 'Liberica')       || 
          (inputs.java == 'microsoft' && 'Microsoft')     || 
          (inputs.java == 'corretto' && 'Corretto')       || 
          inputs.java
        }}"
    - name: Computed cache parameters
      id: cache-vars
      shell: ${{ (runner.os == 'Windows' && 'pwsh') || 'bash' }}
      run: |
        echo "::set-output name=java-path::${{
          (
            inputs.java == 'graalvm' &&
            format(
              '{0}/{1}/{2}/{3}/{4}',
              runner.tool_cache,
              format(
                '{0}-java{1}-{2}', 
                steps.vars.outputs.java, 
                steps.vars.outputs.java-major-version,
                steps.vars.outputs.os
              ),
              inputs.graalvm-version,
              steps.vars.outputs.arch,
              format(
                '{0}-java{1}-{2}', 
                steps.vars.outputs.java, 
                steps.vars.outputs.java-major-version,
                inputs.graalvm-version
              )
            )
          ) || (
            format(
              '{0}/Java_{1}_jdk/{2}.*/{3}',
              runner.tool_cache,
              steps.vars.outputs.java,
              steps.vars.outputs.java-major-version,
              steps.vars.outputs.arch
            )
          )
        }}"
        echo "::set-output name=java-path-complete-mark::${{
          (
            inputs.java == 'graalvm' &&
            format(
              '{0}/{1}/{2}/{3}.complete',
              runner.tool_cache,
              format(
                '{0}-java{1}-{2}', 
                steps.vars.outputs.java, 
                steps.vars.outputs.java-major-version,
                steps.vars.outputs.os
              ),
              inputs.graalvm-version,
              steps.vars.outputs.arch
            )
          ) || (
            format(
              '{0}/Java_{1}_jdk/{2}.*/{3}.complete',
              runner.tool_cache,
              steps.vars.outputs.java,
              steps.vars.outputs.java-major-version,
              steps.vars.outputs.arch
            )
          )
        }}"
        echo "::set-output name=java-cache-key::${{
          format(
            'cache-{0}-java-{1}-{2}-{3}',
            steps.vars.outputs.java,
            (inputs.java == 'graalvm' &&
              format('{0}-{1}', inputs.java-version, inputs.graalvm-version)
            ) || inputs.java-version,
            steps.vars.outputs.os,
            steps.vars.outputs.arch
          )
        }}"
    - name: Cache Java tooling
      uses: actions/cache@v4.2.3
      with:
        path: |
          ${{ steps.cache-vars.outputs.java-path }}
          ${{ steps.cache-vars.outputs.java-path-complete-mark }}
        key: ${{ steps.cache-vars.outputs.java-cache-key }}

    - name: Setup Java
      uses: actions/setup-java@v3.11.0
      if: ${{ inputs.java && inputs.java != 'graalvm' }}
      with:
        distribution: ${{ inputs.java }}
        java-version: ${{ inputs.java-version }}

    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      if: ${{ inputs.java == 'graalvm' }}
      with:
        version: ${{ inputs.graalvm-version }}
        java-version: ${{ inputs.java-version }}
        components: ${{ inputs.graalvm-components }}
        github-token: ${{ inputs.github-token }}

    - name: Setup Clojure
      uses: DeLaGuardo/setup-clojure@10.2
      if: ${{ inputs.clojure-cli || inputs.leiningen || inputs.boot || inputs.babashka || inputs.clj-kondo || inputs.cljstyle || inputs.zprint }}
      with:
        cli: ${{ inputs.clojure-cli }}
        lein: ${{ inputs.leiningen }}
        boot: ${{ inputs.boot }}
        bb: ${{ inputs.babashka }}
        clj-kondo: ${{ inputs.clj-kondo }}
        cljstyle: ${{ inputs.cljstyle }}
        zprint: ${{ inputs.zprint }}
        github-token: ${{ inputs.github-token }}

    - name: Package cache
      uses: actions/cache@v4.2.3
      with:
        path: |
          ~/.m2/repository
          ~/.gitlibs
          ~/.deps.clj
        key: "clojure-deps-${{
          hashFiles(
          '**/project.clj',
          '**/deps.edn',
          '**/bb.edn',
          '**/shadow-cljs.edn'
          ) || 'default-cache' }}"
        restore-keys: clojure-deps-default-cache
